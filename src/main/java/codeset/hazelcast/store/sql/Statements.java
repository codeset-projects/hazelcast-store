package codeset.hazelcast.store.sql;

/**
 * Define what statements are required by the SqlMapStore. You can easily add your
 * own implementation and provide a specialized version for your needs and target
 * database vendor.
 * 
 * @author ingemar.svensson
 *
 */
public interface Statements {

    /**
     * The SQL for a single object store.
     * 
     * Expects 3 parameters:
     * 
     * 1. key. A string representing the unique map key.
     * 2. class_name. A string representing the className of the value.
     * 3. bytes. Byte representation of the value.
     * 
     * @return the SQL statement.
     */
    String getStoreSql();

    /**
     * The SQL for a multi-object store. This is typically the same as for a
     * single store.
     * 
     * Expects 3 parameters:
     * 
     * 1. key. A string representing the unique map key.
     * 2. class_name. A string representing the className of the value.
     * 3. bytes. Byte representation of the value.
     * 
     * @return the SQL statement.
     */
    String getStoreAllSql();

    /**
     * The SQL for a single delete.
    /**
     * The SQL for a single delete.
     * 
     * Expects 1 parameter:
     * 1. key. A string representing the unique map key.
     * 
     * @return the SQL statement.
     */
    String getDeleteSql();

    /**
     * The SQL for deletion of all values of a certain type.
     * 
     * @return the SQL statement.
     */
    String getDeleteAllSql();

    /**
     * The SQL for a single load.
     * 
     * Expects 1 parameter:
     * 1. key. A string representing the unique map key.
     * 
     * @return the SQL statement.
     */
    String getLoadSql();

    /**
     * The SQL for a multi-load of values matching a list of keys
     * provided. The keys are passed in and the SqlMapStore will iterate
     * over the list and create a SQL fragment suitable for an "IN"
     * statement.
     * 
     * Example: SELECT * FROM HZ_TABLE WHERE key IN ('1', '3', '4'). The
     * bracket part is generated by the SqlMapStore and appended to the
     * statement returned here.
     * 
     * @return the SQL statement.
     */
    String getLoadAllSql();

    /**
     * The SQL to get all keys for a particular type. It is used during the
     * priming of the maps.
     * 
     * Expects 1 parameter:
     * 1. class_name. A string representing the class name of the values.
     * 
     * @return the SQL statement.
     */
    String getLoadKeysSql();

}
